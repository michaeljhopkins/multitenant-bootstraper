<?php namespace $NAMESPACE_REPOSITORY$;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Container\Container as App;

abstract class Repository
{
    /**
     *
     * @var $app
     */
    private $app;

    /**
     *
     * @var $model
     */
    protected $model;

    /**
     *
     * @param App $app
     * @param Collection $collection
     */
    public function __construct()
    {
        $this->app = new App();
        $this->makeModel();
    }

    /**
     * Specify Model class name
     *
     * @return mixed
     */
    public abstract function model();

    /**
     *
     * @return \Illuminate\Database\Eloquent\Builder
     * @throws Exception
     */
    public function makeModel()
    {
        $model = $this->app->make($this->model());

        if (!$model instanceof Model) {
            throw new Exception("Class {$this->model()} must be an instance of Illuminate\\Database\\Eloquent\\Model");
        }

        return $this->model = $model;
    }

    /**
     * call the function of repository
     */
    public function __call($method, $args)
    {
        return call_user_func_array([$this->model, $method], $args);
    }

    /**
     *
     * @param array $data
     * @return bool
     */
    public function create($data)
    {
        $this->model->fill($data);
        return $this->model->save();
    }

    /**
     *
     * @param array $data
     * @param string|int $id
     * @param string $attribute
     * @return mixed
     */
    public function update($id, $data, $attribute = 'id')
    {
        $record = $this->model->where($attribute, '=', $id)->first();
        $record ->fill($data);
        return $record->save();
    }

    /**
     *
     * @param string|int $id
     * @param string $attribute
     * @return mixed
     */
    public function delete($id, $attribute = 'id')
    {
        $record = $this->model->where($attribute, '=', $id)->first();
        return $record ->forceDelete();
    }
}
